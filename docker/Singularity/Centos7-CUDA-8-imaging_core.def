BootStrap: docker
From: nvidia/cuda:8.0-cudnn6-devel-centos7
IncludeCmd: yes

MAINTAINER Yann Cobigo
VERSION v1.0.0

%setup
    echo "Looking in directory '$SINGULARITY_ROOTFS' for /bin/sh"
    if [ ! -x "$SINGULARITY_ROOTFS/bin/sh" ]; then
        echo "Hrmm, this container does not have /bin/sh installed..."
        exit 1
    fi
    mkdir $SINGULARITY_ROOTFS/mnt/neuroimaging/ \
    	  $SINGULARITY_ROOTFS/mnt/cuda \
    	  $SINGULARITY_ROOTFS/mnt/macdata \
	  $SINGULARITY_ROOTFS/mnt/images \
	  $SINGULARITY_ROOTFS/mnt/images_test \
	  $SINGULARITY_ROOTFS/mnt/MAC_QC \
	  $SINGULARITY_ROOTFS/mnt/production \
	  $SINGULARITY_ROOTFS/mnt/Quarantine \
	  $SINGULARITY_ROOTFS/mnt/SNC-PACS-GW1 \
	  $SINGULARITY_ROOTFS/mnt/tempo \
	  $SINGULARITY_ROOTFS/netapp \
	  $SINGULARITY_ROOTFS/netapp/home \
	  $SINGULARITY_ROOTFS/etc/singularity/ 
	  
    

    #
    #
    exit 0

%post

#
	#
	echo "Update the image"
	yum update -y && yum install -y epel-release.noarch && yum groupinstall -y "Development tools" && yum makecache fast


	#
	#
	echo "Basic installation"
	yum install  -y openssh.x86_64 openssh-clients.x86_64 openssh-server.x86_64 fuse-sshfs.x86_64 \
	    emacs tmux htop git wget tree.x86_64 cmake gcc.x86_64 gcc-c++ \
	    fftw-libs-single-3.3.3-8.el7.x86_64 python-devel.x86_64 \
	    xz zlib-devel bzip2-devel bzip2-libs-1.0.6-13.el7.x86_64 dos2unix.x86_64 \
	    openssl-devel ncurses-devel sqlite-devel libreoffice.x86_64 gwenview.x86_64 \
	    libpng12.x86_64 mlocate-0.26-5.el7.x86_64  tetex g2clib-devel compat-libf2c-34.x86_64 \
	    libyaml-devel.x86_64  libyaml-0.1.4-11.el7_0.x86_64 yaml-cpp.x86_64 yaml-cpp-devel.x86_64 \
	    gsl.x86_64 gsl-devel.x86_64 gimp.x86_64 evince.x86_64 bc.x86_64 \
	    gedit.x86_64 gedit-plugins.x86_64 gedit-plugins-data.x86_64 \
	    gmp-devel.x86_64 gmp-static.x86_64 mpfr.x86_64 mpfr-devel.x86_64  glibc.i686 \
	    glibc-static libstdc++-static \
	    sudo.x86_64 net-tools initscripts nautilus.x86_64 tkinter \
	    libwayland-client \
	    hdf5.x86_64 hdf5-devel.x86_64 hdf5-mpich.x86_64 hdf5-mpich-devel.x86_64 hdf5-mpich-static.x86_64 \
	    hdf5-openmpi.x86_64 hdf5-openmpi-devel.x86_64 hdf5-openmpi-static.x86_64 hdf5-static.x86_64

	#
	#
	echo "GL installation"
	yum install -y mesa-libGL-devel.x86_64 mesa-libGL-static-devel.x86_64 \
	    mesa-libGLU.x86_64 mesa-libGLU-devel.x86_64 mesa-libGLU.i686 mesa-libGLU-devel.i686 \
	    mesa-libGLw.x86_64 mesa-libGLw-devel.x86_64 \
	    mesa-libOSMesa.x86_64 mesa-libOSMesa-devel.x86_64 \
	    mesa-libgbm-devel.x86_64

	#
	#
	echo "X11 installation"
	yum install -y xorg-x11-apps.x86_64 \
	    xorg-x11-xauth xorg-x11-drivers.x86_64 \
	    xorg-x11-utils.x86_64 xorg-x11-xinit-session.x86_64

	#
	#
	echo "Qt installation"
	yum install -y qt-config.x86_64 qt-creator.x86_64 qt-devel.x86_64 \
	     qt-examples.x86_64 qt-mysql.x86_64 qt-postgresql.x86_64 qt5-designer.x86_64 \
	     qt5-qt3d.x86_64 qt5-qt3d-devel.x86_64 qt5-qtbase.x86_64 qt5-qtbase-devel.x86_64 \
	     qt5-qtbase-examples.x86_64 qt5-qtconfiguration.x86_64 \
	     qt5-qtconfiguration-devel.x86_64 qt5ct.x86_64 qt5-qtx11extras.x86_64 qt5-qtx11extras-devel.x86_64 \
	     qt5-qtsvg.x86_64 qt5-qtsvg-devel.x86_64 qt5-qtsvg-examples.x86_64 \
	     qt5-qtbase-gui.x86_64 qt5-qtsvg.x86_64 qt5-qtsvg-devel.x86_64 qt5-qtsvg-examples.x86_64\
	     graphviz.x86_64 graphviz-devel.x86_64 graphviz-doc.x86_64 graphviz-gd.x86_64 graphviz-graphs.x86_64 \
	     graphviz-guile.x86_64 graphviz-python.x86_64


	#
	#
	echo "Python installation"
	yum install -y  python-pip && pip install --upgrade pip setuptools && yum install -y  numpy scipy python-matplotlib ipython python-pandas sympy python-nose  \
	    libxml2-devel.x86_64 libxml2-python.x86_64 libxslt.x86_64 libxslt-devel.x86_64 libxslt-python.x86_64 \

	#
	#
	echo "Python pip installation"
	pip install --upgrade pip nibabel networkx numpy rdflib sphinx graphviz scipy sklearn progressbar requests matplotlib ipython pandas sympy nose gpustat\
	    && pip install --upgrade lockfile future simplejson prov statsmodels psutil cython untangle jsonpath-rw \
	    bctpy h5py networkx
	pip install -e git://github.com/nipy/nipype.git#egg=Package && pip install --upgrade nipype && pip install --upgrade pygraphviz Pillow python-igraph
	# tensor flow
	pip install --upgrade tensorflow-gpu && pip install --upgrade keras



	#
	#
	exit 0
	
%runscript
	echo "Arguments received: $*"
	exec /usr/bin/python "$@"

%test
	#
echo "Sounds OK"
