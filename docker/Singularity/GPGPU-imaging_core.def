BootStrap: docker
###############
# SINGULARITY #
###############
# !Attention!
# export SINGULARITY_CACHEDIR=/home/cobigo/devel/singularity/CACHE
# export SINGULARITY_TMPDIR=/home/cobigo/devel/singularity/TMP
#
### Creating with writable and --sandbox directories
# singularity build --sandbox GPGPU-imaging_core_2.0.0 GPGPU-imaging_core.def
# singularity run --writable --nv -B /mnt/data/shared:/shared GPGPU-imaging_core_2.0.0
#
### Move into a unmuttable SIF (Singularity Image Format)
# singularity build GPGPU-imaging_core_2.0.0.sif GPGPU-imaging_core_2.0.0
# 
### Singularity Definition Files, but will be unmuttable
# singularity build  /mnt/data/shared/Production/GPGPU-imaging_core_2.1.0.sif GPGPU-imaging_core.def
#
###############
# NVIDIA CUDA #
###############
# IIX  10.2 (driver: 440.100)
# VII  10.1 (driver: 418.113)
# Matt's 10.0, 9.1
# Cerebellum 7.5
#From: nvidia/cuda:10.2-runtime-centos7
#From: centos:centos7
From: fedora:30
IncludeCmd: yes

%environment
	PATH=/usr/local/cuda/bin:${PATH} 
	LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs/:${LD_LIBRARY_PATH} 

%setup
    echo "Looking in directory '$SINGULARITY_ROOTFS' for /bin/sh"
    if [ ! -x "$SINGULARITY_ROOTFS/bin/sh" ]; then
        echo "Hrmm, this container does not have /bin/sh installed..."
        exit 1
    fi
    mkdir $SINGULARITY_ROOTFS/mnt/neuroimaging/ \
    	  $SINGULARITY_ROOTFS/mnt/macdata \
	  $SINGULARITY_ROOTFS/mnt/images \
	  $SINGULARITY_ROOTFS/mnt/images_test \
	  $SINGULARITY_ROOTFS/mnt/MAC_QC \
	  $SINGULARITY_ROOTFS/mnt/production \
	  $SINGULARITY_ROOTFS/mnt/Quarantine \
	  $SINGULARITY_ROOTFS/mnt/SNC-PACS-GW1 \
	  $SINGULARITY_ROOTFS/mnt/tempo \
	  $SINGULARITY_ROOTFS/shared \
	  $SINGULARITY_ROOTFS/home/mac \
	  $SINGULARITY_ROOTFS/netapp \
	  $SINGULARITY_ROOTFS/netapp/home \
	  $SINGULARITY_ROOTFS/etc/singularity/ \
	  $SINGULARITY_ROOTFS/usr/local/lib64/R 
	  
    cp singularity.conf $SINGULARITY_ROOTFS/etc/singularity/
    cp requirements.txt $SINGULARITY_ROOTFS/etc/singularity/
    # Customized applications 
    #cp -r QAP  $SINGULARITY_ROOTFS/mnt/tempo/
    #cp -r atom.x86_64.rpm  $SINGULARITY_ROOTFS/mnt/tempo/
    #cp -r dipy $SINGULARITY_ROOTFS/mnt/tempo/
    

    #
    #
    exit 0

%post
	#
	# CUDA	
	# Versions: https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/
	# 10.2
	CUDA=10-2
	CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.2
	CUDA_VERSION=10.2.89-1 
	CUDA_PKG_VERSION=$CUDA-$CUDA_VERSION
	# 10.1
	#CUDA=10-1
	#CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.1
	#CUDA_VERSION=10.1.105-1 
	#CUDA_PKG_VERSION=$CUDA-$CUDA_VERSION
	# 10.0
	#CUDA=10-0
	#CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.0
	#CUDA_VERSION=10.0.130-1 
	#CUDA_PKG_VERSION=$CUDA-$CUDA_VERSION
	# 9.1
	#CUDA=9-1
	#CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-9.1
	#CUDA_VERSION=9.1.85-1 
	#CUDA_PKG_VERSION=$CUDA-$CUDA_VERSION
	# 7.5
	#CUDA=7-5
	#CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-7.5
	#CUDA_VERSION=7.5-18
	#CUDA_PKG_VERSION=$CUDA-$CUDA_VERSION

	#
	#
	echo "Update the image"
	dnf update -y && dnf install -y epel-release.noarch && dnf groupinstall -y "Development tools" && dnf makecache fast


	#
	#
	# CUDA 11.0 (11.0.171)>= 450.36.06
	# CUDA 10.2 (10.2.89)>= 440.33
	# CUDA 10.1 (10.1.105)>= 418.39
	# CUDA 10.0 (10.0.130)>= 410.48
	# CUDA 9.2 (9.2.88)>= 396.26
	# CUDA 9.1 (9.1.85)>= 390.46
	# CUDA 9.0 (9.0.76)>= 384.81
	#
	NVIDIA_VISIBLE_DEVICES=all 
	NVIDIA_DRIVER_CAPABILITIES=compute,utility 
	NVIDIA_REQUIRE_CUDA="cuda>=10.2 brand=tesla,driver>=440,driver<441"
	# cuDNN 
        CUDNN_VERSION=7.4.2.24 
#	#LABEL com.nvidia.cudnn.version="${CUDNN_VERSION}" 
#	#
#	NVIDIA_GPGKEY_SUM="d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5" 
#	curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/7fa2af80.pub | sed '/^Version/d' > /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA
#	echo "$NVIDIA_GPGKEY_SUM  /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA" | sha256sum -c --strict - 
#	#curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-${CUDA_PKG_VERSION}.x86_64.rpm 
	rpm -i  https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-repo-rhel7-${CUDA_VERSION}.x86_64.rpm 
	echo "exclude=xorg-x11-drv-nvidia*,akmod-nvidia*,kmod-nvidia*,nvidia-driver*,nvidia-settings,nvidia-xconfig,nvidia-persistenced,cuda-nvidia-kmod-common,dkms-nvidia,nvidia-libXNVCtrl" >> /etc/yum.repos.d/cuda.repo 
	#
	# cuDNN license: https://developer.nvidia.com/cudnn/license_agreement 
	CUDNN_DOWNLOAD_SUM=2edfc86a02b50d17e88c478955a332e6a1e8174e7e53a3458b4ea51faf02daa3 
	curl -fsSL http://developer.download.nvidia.com/compute/redist/cudnn/v7.4.2/cudnn-10.0-linux-x64-v7.4.2.24.tgz -O 
	echo "$CUDNN_DOWNLOAD_SUM  cudnn-10.0-linux-x64-v7.4.2.24.tgz" | sha256sum -c -     
	tar --no-same-owner -xzf cudnn-10.0-linux-x64-v7.4.2.24.tgz -C /usr/local --wildcards 'cuda/lib64/libcudnn.so.*'
	rm cudnn-10.0-linux-x64-v7.4.2.24.tgz 
	ldconfig
	# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a 
	dnf install -y cuda-samples-$CUDA cuda-toolkit-${CUDA}.x86_64
	if [ $CUDA == "10-0" ] || [ $CUDA == "10-1" ] ;
	then
		dnf install -y cuda-compat-$CUDA
	fi
	#
	dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/fedora30/x86_64/cuda-fedora30.repo


	#
	#
	echo "Basic installation"
	dnf install  -y  openssl-devel cmake gcc.x86_64 gcc-c++ gcc-gfortran make.x86_64 make-devel.x86_64 git tcsh.x86_64 \
	    openssh.x86_64 openssh-clients.x86_64 openssh-server.x86_64 fuse-sshfs.x86_64 emacs tmux htop  wget tree.x86_64 \
	    fftw-libs.x86_64 python2-devel.x86_64  mercurial.x86_64 \
	    libuuid.x86_64 libuuid-devel.x86_64 lua.x86_64 lua-devel.x86_64 patch.x86_64 \
	    yasm.x86_64 yasm-devel.x86_64 krb5-devel.x86_64 gpgme-devel.x86_64 gmpc-devel.x86_64 libmpc-devel.x86_64 \
	    atlas-devel.x86_64 boost-devel.x86_64 gflags-devel.x86_64 glog-devel.x86_64 hdf5-devel.x86_64 \
	    openblas.x86_64 openblas-Rblas.x86_64 openblas-devel.x86_64 openblas-openmp.x86_64 openblas-static.x86_64 \
	    openblas-threads.x86_64 openblas-threads64.x86_64 openblas-serial64.x86_64 openblas-openmp64.x86_64 \
	    leveldb-devel.x86_64 lmdb-devel.x86_64 opencv-devel.x86_64 protobuf-devel.x86_64 snappy-devel.x86_64 \
	    xz xz-devel zlib-devel bzip2-devel bzip2-libs.x86_64 dos2unix.x86_64 blender.x86_64 paraview.x86_64 \
	    ncurses-devel sqlite-devel libreoffice.x86_64 gwenview.x86_64 tetgen.x86_64 tetgen-devel.x86_64 \
	    libpng12.x86_64 libpng-devel mlocate.x86_64  tetex-* tetex-elsevier g2clib-devel compat-libf2c-34.x86_64 \
	    libyaml-devel.x86_64  libyaml.x86_64 yaml-cpp.x86_64 yaml-cpp-devel.x86_64 \
	    gsl.x86_64 gsl-devel.x86_64 gimp.x86_64 evince.x86_64 bc.x86_64 okular.x86_64 \
	    gedit.x86_64 gedit-plugins.x86_64 gedit-plugins-data.x86_64 libmng-devel.x86_64 \
	    gmp-devel.x86_64 gmp-static.x86_64 mpfr.x86_64 mpfr-devel.x86_64  glibc.i686 \
	    sudo.x86_64 net-tools initscripts nautilus.x86_64 tkinter curl.x86_64 curl-devel \
	    octave.x86_64 pandoc* motif.x86_64 motif-devel.x86_64 motif-static.x86_64 xlockmore-motif.x86_64 \
	    libjpeg-devel libtiff-devel libX11-devel libXt-devel cairo pango-devel libicu-devel texinfo texlive-latex-bin-bin \
	    firefox.x86_64 firefox-pkcs11-loader.x86_64 libxml2.x86_64 libxml2-devel.x86_64 libxml2-static.x86_64 libxml++-devel.x86_64 libxml-devel.x86_64\
	    gobject-introspection-devel cairo-gobject-devel

	    #
	    # LaTeX
	    yum -y install 'tex(multirow.sty)'  'tex(balance.sty)' 'tex(makecell.sty)'  'tex(stfloats.sty)'  'tex(wrapfig.sty)' 'tex(breakcites.sty)'



	#
	#
	echo "X11 installation"
	dnf install -y xorg-x11-apps.x86_64 \
	    xorg-x11-xauth xorg-x11-drivers.x86_64 \
	    xorg-x11-utils.x86_64 xorg-x11-xinit-session.x86_64

	#
	#
	echo "Qt installation"
	dnf install -y qt-config.x86_64 qt-creator.x86_64 qt-devel.x86_64 \
	     qt-examples.x86_64 qt-mysql.x86_64 qt-postgresql.x86_64 qt5-designer.x86_64 \
	     qt5-qt3d.x86_64 qt5-qt3d-devel.x86_64 qt5-qtbase.x86_64 qt5-qtbase-devel.x86_64 \
	     qt5-qtbase-examples.x86_64 qt5-qtconfiguration.x86_64 \
	     qt5-qtconfiguration-devel.x86_64 qt5ct.x86_64 qt5-qtx11extras.x86_64 qt5-qtx11extras-devel.x86_64 \
	     qt5-qtsvg.x86_64 qt5-qtsvg-devel.x86_64 qt5-qtsvg-examples.x86_64 \
	     qt5-qtbase-gui.x86_64 qt5-qtsvg.x86_64 qt5-qtsvg-devel.x86_64 qt5-qtsvg-examples.x86_64\
	     graphviz.x86_64 graphviz-devel.x86_64 graphviz-doc.x86_64 graphviz-gd.x86_64 graphviz-graphs.x86_64 \
	     graphviz-guile.x86_64 graphviz-python2.x86_64
	
        #
        # 
        SRC=/usr/local/src/
        ###############
        # NVIDIA CUDA #
        ###############
        cp -a /usr/local/cuda/ ${CUDA_TOOLKIT_ROOT_DIR}/
	#chown cobigo ${CUDA_TOOLKIT_ROOT_DIR}/
	#chgrp cobigo ${CUDA_TOOLKIT_ROOT_DIR}/
        rm -rf /usr/local/cuda
        ln -s ${CUDA_TOOLKIT_ROOT_DIR} /usr/local/cuda
        PATH=${CUDA_TOOLKIT_ROOT_DIR}/bin:/usr/local/bin:$PATH 
        LD_LIBRARY_PATH=${CUDA_TOOLKIT_ROOT_DIR}/lib64:${CUDA_TOOLKIT_ROOT_DIR}/lib64/stubs:/usr/local/lib64:/usr/local/lib:$LD_LIBRARY_PATH
        # prepare the space for the drivers
        mkdir /etc/OpenCL
        mkdir /etc/OpenCL/vendors
        #
        # Installation of the low level machine
        # Instead of installing the low level CPU runtime, it is possible to build and install the Khronos ICD loader, which contains all the symbols required.
        git clone https://github.com/KhronosGroup/OpenCL-Headers /usr/local/include/OpenCL-Headers
        ln -s /usr/local/include/OpenCL-Headers ${DPCPP_NVIDIA}/OpenCL-Headers
        git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader ${DPCPP_NVIDIA}/OpenCL-ICD-Loader
        # OpenCL defines an Installable Client Driver (ICD) mechanism to allow developers to build applications against an Installable Client Driver loader (ICD loader) rather than linking their applications against a specific OpenCL implementation.
        cd ${DPCPP_NVIDIA}/OpenCL-ICD-Loader
        mkdir build
        cd build
        cmake -D OPENCL_ICD_LOADER_HEADERS_DIR:PATH=${DPCPP_NVIDIA}/OpenCL-Headers/ ..
        make
        echo ${DPCPP_NVIDIA}/OpenCL-ICD-Loader/build/test/driver_stub/libOpenCLDriverStub.so > /etc/OpenCL/vendors/test.icd
        #########
        # CMake #
        #########
        CM_MAJ=3
        CM_MIN=18
        CM_PATH=0
        # 
        cd $SRC
        curl -fsSL https://github.com/Kitware/CMake/releases/download/v${CM_MAJ}.${CM_MIN}.${CM_PATH}-rc3/cmake-${CM_MAJ}.${CM_MIN}.${CM_PATH}-rc3.tar.gz -O && \
        tar zxvf cmake-${CM_MAJ}.${CM_MIN}.${CM_PATH}-rc3.tar.gz && cd cmake-${CM_MAJ}.${CM_MIN}.${CM_PATH}-rc3 && mkdir build && cd build 
        #
        cmake \
        -D CMAKE_BUILD_TYPE=Release \
        -D BUILD_SHARED_LIBS=OFF \
        -D CMAKE_INSTALL_PREFIX=/usr/local/ .. && make -j 8 && make install
        ln -s /usr/local/share/cmake-${CM_MAJ}.${CM_MIN} /usr/local/share/cmake
        #########
        # BOUML #
        #########
        BO_MAJ=7
        BO_MIN=10
        BO_PATCH=1
        #
        cd $SRC
        # https://www.bouml.fr/download.html
        wget http://bouml.free.fr/files/bouml-${BO_MAJ}.${BO_MIN}-CentOS7.x86_64.rpm
        dnf install -y bouml-${BO_MAJ}.${BO_MIN}-CentOS7.x86_64.rpm
        
        #######
        # VTK #
        #######
        VTK_MAJ=9
        VTK_MIN=0
        VTK_PATCH=1
        #
        cd $SRC
        #https://www.vtk.org/files/release/9.0/VTK-9.0.1.tar.gz
        curl -fsSL https://www.vtk.org/files/release/${VTK_MAJ}.${VTK_MIN}/VTK-${VTK_MAJ}.${VTK_MIN}.${VTK_PATCH}.tar.gz -O && \
        tar zxvf VTK-${VTK_MAJ}.${VTK_MIN}.${VTK_PATCH}.tar.gz && cd VTK-${VTK_MAJ}.${VTK_MIN}.${VTK_PATCH} && mkdir build && cd build
        /usr/local/bin/cmake \
        -D CMAKE_BUILD_TYPE=Release \
        -D BUILD_SHARED_LIBS=ON \
        -D CMAKE_INSTALL_PREFIX=/usr/local/ .. && make -j 8 && make install
        
        #######
        # ITK #
        #######
        ITK_MAJ=5
        ITK_MIN=1
        ITK_PATCH=0
        #
        cd $SRC
        curl -fsSL https://github.com/InsightSoftwareConsortium/ITK/releases/download/v${ITK_MAJ}.${ITK_MIN}.${ITK_PATCH}/InsightToolkit-${ITK_MAJ}.${ITK_MIN}.${ITK_PATCH}.tar.gz -O && \
        tar zxvf InsightToolkit-${ITK_MAJ}.${ITK_MIN}.${ITK_PATCH}.tar.gz && cd InsightToolkit-${ITK_MAJ}.${ITK_MIN}.${ITK_PATCH} && mkdir build && cd build
        /usr/local/bin/cmake \
               -D CMAKE_BUILD_TYPE:STRING=RELEASE \
               -D BUILD_SHARED_LIBS=ON \
               -D CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE \
               -D ITK_LEGACY_REMOVE=ON \
               -D Module_ITKVtkGlue:BOOL=OFF \
               -D VTK_DIR:PATH=/usr/local/lib64/ \
               -D CMAKE_INSTALL_PREFIX:PATH=/usr/local/ .. && make -j 8 && make install
        
        ##########
        # Eigen3 #
        ##########
        EG_MAJ=3
        EG_MIN=3
        EG_PATCH=7
        #
        cd $SRC
        git clone https://gitlab.com/libeigen/eigen && cd eigen && git checkout ${EG_MAJ}.${EG_MIN}.${EG_PATCH}
        mkdir build && cd build
        /usr/local/bin/cmake \
               -D CMAKE_BUILD_TYPE:STRING=RELEASE \
               -D BUILD_SHARED_LIBS=ON \
               -D CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE \
               -D CMAKE_INSTALL_PREFIX:PATH=/usr/local/ ..  && make install
        
        ########
        # CGAL #
        ########
        CG_MAJ=5
        CG_MIN=0
        CG_PATCH=2
        #
        cd $SRC
        git clone https://github.com/CGAL/cgal && cd cgal && git checkout releases/CGAL-${CG_MAJ}.${CG_MIN}.${CG_PATCH}
        
        ##########
        # libigl #
        ##########
        lgl_MAJ=2
        lgl_MIN=2
        lgl_PATCH=0
        #
        cd $SRC
        git clone https://github.com/libigl/libigl.git && cd libigl && git checkout v${lgl_MAJ}.${lgl_MIN}.${lgl_PATCH} && mkdir build && cd build
        /usr/local/bin/cmake \
               -D CMAKE_INSTALL_PREFIX:PATH=/usr/local/ ..  && make -j 8 && make install
        
        ############
        # GeomView #
        ############
        GV_MAJ=1
        GV_MIN=9
        GV_PATCH=5
        # wget https://sourceforge.net/projects/geomview/files/geomview/1.9.5/geomview-1.9.5.tar.gz/download -o geomview-1.9.5.tar.gz
        #https://sourceforge.net/projects/geomview/files/geomview/1.9.5/geomview-1.9.5.tar.gz/download
        cd $SRC
        wget https://sourceforge.net/projects/geomview/files/geomview/${GV_MAJ}.${GV_MIN}.${GV_PATCH}/geomview-${GV_MAJ}.${GV_MIN}.${GV_PATCH}.tar.gz/download &&\
	mv download geomview-${GV_MAJ}.${GV_MIN}.${GV_PATCH}.tar.gz && tar zxvf geomview-${GV_MAJ}.${GV_MIN}.${GV_PATCH}.tar.gz &&\
	cd geomview-${GV_MAJ}.${GV_MIN}.${GV_PATCH} && ./configure --prefix=/usr/local/ && make -j8 && make install 
        
        ########
        # JSON #
        ########
        JS_MAJ=3
        JS_MIN=7
        JS_PATCH=3
        #
        cd $SRC
        git clone https://github.com/nlohmann/json && cd json && git checkout v${JS_MAJ}.${JS_MIN}.${JS_PATCH}
        mkdir build && cd build
        /usr/local/bin/cmake \
               -D CMAKE_BUILD_TYPE:STRING=RELEASE \
               -D BUILD_SHARED_LIBS=ON \
               -D CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE \
               -D CMAKE_INSTALL_PREFIX:PATH=/usr/local/ ..  && make -j 8 && make install
        	      
        ########
        # ANTs #
        ########
	# no installation with ANTs ... Create a env variabe
        ANTs_MAJ=2
        ANTs_MIN=3
        ANTs_PATCH=5
        #
        cd $SRC
        git clone git://github.com/stnava/ANTs.git && cd ANTs && git checkout v${ANTs_MAJ}.${ANTs_MIN}.${ANTs_PATCH}
        mkdir build && cd build
        /usr/local/bin/cmake \
       	       -D CMAKE_BUILD_TYPE:STRING=Release \
               -D BUILD_SHARED_LIBS:BOOL=ON \
               -D CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE ..  && make -j 8 && make install
        	      
##        #######
##        # FSL #
##        #######
##        # Missing fslview & fsleyes
##        cd $SRC
##	# CifTi
##        Cif_MAJ=1
##        Cif_MIN=5
##        Cif_PATCH=3
##	git clone https://github.com/Washington-University/CiftiLib.git && cd CiftiLib \
##	&& git checkout v${Cif_MAJ}.${Cif_MIN}.${Cif_PATCH} && mkdir build && cd build
##        /usr/local/bin/cmake \
##       	       -D CMAKE_BUILD_TYPE:STRING=Release \
##               -D BUILD_SHARED_LIBS:BOOL=ON \
##	       -D CMAKE_INSTALL_PREFIX:PATH=/usr/local/ ..  && make -j 8 && make install
##	#
##	wget wget http://ftp.cse.buffalo.edu/pub/Gnome/sources/libxml++/4.9/libxml++-4.9.1.tar.xz &&
##	#
##        FSL_MAJ=6
##        FSL_MIN=0
##        FSL_PATCH=4
##        #
##	ln -s /usr/lib64/libxml++-2.6.so.2 /usr/lib64/libxml++-2.6.so
##        curl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-${FSL_MAJ}.${FSL_MIN}.${FSL_PATCH}-sources.tar.gz -O && \
##        tar zxvf fsl-${FSL_MAJ}.${FSL_MIN}.${FSL_PATCH}-sources.tar.gz && mv fsl fsl-${FSL_MAJ}.${FSL_MIN}.${FSL_PATCH} &&\
##	ln -s fsl-${FSL_MAJ}.${FSL_MIN}.${FSL_PATCH} fsl && cd fsl && export FSLDIR=$PWD && \
##        source ${FSLDIR}/etc/fslconf/fsl.sh && ./build  


	###########
	# MRtrix3 #
	###########
	#https://mrtrix.readthedocs.io/en/latest/installation/build_from_source.html
	MR_MAJ=3
	MR_MIN=0
	MR_PATCH=2
	#
	cd $SRC
	ln -s /usr/bin/moc-qt5 /usr/bin/moc
	ln -s /usr/bin/qmake-qt5 /usr/bin/qmake
	git clone https://github.com/MRtrix3/mrtrix3.git && cd mrtrix3 && git checkout ${MR_MAJ}.${MR_MIN}.${MR_PATCH}
	export EIGEN_CFLAGS="-isystem /usr/local/include/eigen3"
	./configure && ./build  && make install
	/usr/local/bin/cmake \
	       -D CMAKE_BUILD_TYPE:STRING=RELEASE \
		-D BUILD_SHARED_LIBS=ON \
		-D CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE \
		-D CMAKE_INSTALL_PREFIX:PATH=/usr/local/ ..  && make install


	#
	#
	echo "Python installation"
	dnf install -y  python-pip && curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
	python get-pip.py pip==20.2.1 wheel==0.34.2 setuptools==44.1.1 numpy==1.16.6
	#pip install --upgrade pip wheel setuptools numpy
	pip install -r /etc/singularity/requirements.txt
	#pip install -e git://github.com/nipy/nipype.git#egg=Package 


	#
	#
	echo "Modified PYTHON libraries"
	# cd /mnt/tempo/QAP && chmod u+x setup.py && python setup.py build && python setup.py install 
	# cd /mnt/tempo/ && dnf install -y atom.x86_64.rpm
	#    && cd /mnt/tempo/dipy && chmod u+x setup.py && python setup.py build && python setup.py install
	#
	rm -rf /mnt/tempo/*

       #
       # R/R-studio
       echo "R/R-studio"
       dnf install -y readline-devel pcre-devel  
       # Requirements during R make --with-recommended-packages
       # Requirements for Java                    ## R CMD javareconf below
       dnf install -y java-1.8.0-openjdk-* which  qpdf valgrind
       # Version of R to build and install
       export R_VERSION=3.5.1
       cd /tmp && curl -O https://cloud.r-project.org/src/base/R-3/R-${R_VERSION}.tar.gz
       cd /tmp && tar -zxf R-${R_VERSION}.tar.gz
       cd /tmp/R-${R_VERSION} && ./configure --with-readline=yes --enable-memory-profiling --enable-R-shlib && make && make install
       #      javareconf
       # R runtime properties
       mkdir /usr/local/lib64/R/site-library
       #echo "R_BIOC_VERSION=3.5" >> .Renviron
       #echo 'options(repos = c(CRAN="https://cloud.r-project.org", BioCsoft="https://bioconductor.org/packages/3.5/bioc", BioCann="https://bioconductor.org/packages/3.5/data/annotation", BioCexp="https://bioconductor.org/packages/3.5/data/experiment", BioCextra="https://bioconductor.org/packages/3.5/extra"))' >> .Rprofile
       #
       # R-studio
       # https://www.rstudio.com/products/rstudio/download-server/
       cd /tmp && wget https://download1.rstudio.org/rstudio-1.1.456-x86_64.rpm
       dnf install -y rstudio-1.1.456-x86_64.rpm


       #
       # Deep Learning
       # tensor flow
       pip install --upgrade tensorflow-gpu && pip install --upgrade keras
       pip install torch torchvision
       # TractSeg (https://www.sciencedirect.com/science/article/pii/S1053811918306864)
       pip install TractSeg

       #
       #
       exit 0

%runscript
	echo "Arguments received: $*"
	exec /usr/bin/python "$@"

%test
	#
	echo "Sounds OK"	

%labels
MAINTAINER Yann Cobigo
VERSION    v2.0.0

